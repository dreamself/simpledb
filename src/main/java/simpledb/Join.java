package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate joinPredicate;

    private OpIterator opIterator1;

    private OpIterator opIterator2;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.joinPredicate = p;
        this.opIterator1 = child1;
        this.opIterator2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return opIterator1.getTupleDesc().getFieldName(joinPredicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return opIterator2.getTupleDesc().getFieldName(joinPredicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(opIterator1.getTupleDesc(), opIterator2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        opIterator1.open();
        opIterator2.open();
    }

    public void close() {
        // some code goes here
        super.close();
        opIterator1.close();
        opIterator2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        opIterator1.rewind();
        opIterator2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        while(opIterator1.hasNext()){
            Tuple left = opIterator1.next();
            while(opIterator2.hasNext()){
                Tuple right = opIterator2.next();
                if (joinPredicate.filter(left, right)){
                    Tuple mergeTuple =  new Tuple(getTupleDesc());
                    for (int i = 0; i< mergeTuple.getTupleDesc().numFields(); ++i){
                        if (i < left.getTupleDesc().numFields()){
                            mergeTuple.setField(i, left.getField(i));
                        } else {
                            mergeTuple.setField(i, right.getField(i - left.getTupleDesc().numFields()));
                        }
                    }
                    return mergeTuple;
                }
            }
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[]{this.opIterator1, this.opIterator2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        if (opIterator1 != children[0]){
            opIterator1 = children[0];
        }
        if (opIterator2 != children[1]){
            opIterator2 = children[1];
        }
    }

}
